// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto;
namespace intelliflow {
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
}  // namespace intelliflow
PROTOBUF_NAMESPACE_OPEN
template<> ::intelliflow::Sensor* Arena::CreateMaybeMessage<::intelliflow::Sensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace intelliflow {

enum Sensor_unit : int {
  Sensor_unit_celsius = 0,
  Sensor_unit_fahrenheit = 1,
  Sensor_unit_bar = 2,
  Sensor_unit_psi = 3,
  Sensor_unit_ph = 4,
  Sensor_unit_ppm = 5,
  Sensor_unit_volts = 6,
  Sensor_unit_current = 7,
  Sensor_unit_cmps = 8
};
bool Sensor_unit_IsValid(int value);
constexpr Sensor_unit Sensor_unit_unit_MIN = Sensor_unit_celsius;
constexpr Sensor_unit Sensor_unit_unit_MAX = Sensor_unit_cmps;
constexpr int Sensor_unit_unit_ARRAYSIZE = Sensor_unit_unit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sensor_unit_descriptor();
template<typename T>
inline const std::string& Sensor_unit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sensor_unit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sensor_unit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sensor_unit_descriptor(), enum_t_value);
}
inline bool Sensor_unit_Parse(
    const std::string& name, Sensor_unit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sensor_unit>(
    Sensor_unit_descriptor(), name, value);
}
// ===================================================================

class Sensor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:intelliflow.Sensor) */ {
 public:
  inline Sensor() : Sensor(nullptr) {};
  virtual ~Sensor();

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(nullptr);
  }

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "intelliflow.Sensor";
  }
  protected:
  explicit Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sensor_2eproto);
    return ::descriptor_table_sensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Sensor_unit unit;
  static constexpr unit celsius =
    Sensor_unit_celsius;
  static constexpr unit fahrenheit =
    Sensor_unit_fahrenheit;
  static constexpr unit bar =
    Sensor_unit_bar;
  static constexpr unit psi =
    Sensor_unit_psi;
  static constexpr unit ph =
    Sensor_unit_ph;
  static constexpr unit ppm =
    Sensor_unit_ppm;
  static constexpr unit volts =
    Sensor_unit_volts;
  static constexpr unit current =
    Sensor_unit_current;
  static constexpr unit cmps =
    Sensor_unit_cmps;
  static inline bool unit_IsValid(int value) {
    return Sensor_unit_IsValid(value);
  }
  static constexpr unit unit_MIN =
    Sensor_unit_unit_MIN;
  static constexpr unit unit_MAX =
    Sensor_unit_unit_MAX;
  static constexpr int unit_ARRAYSIZE =
    Sensor_unit_unit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  unit_descriptor() {
    return Sensor_unit_descriptor();
  }
  template<typename T>
  static inline const std::string& unit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, unit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function unit_Name.");
    return Sensor_unit_Name(enum_t_value);
  }
  static inline bool unit_Parse(const std::string& name,
      unit* value) {
    return Sensor_unit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required double data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  double data() const;
  void set_data(double value);
  private:
  double _internal_data() const;
  void _internal_set_data(double value);
  public:

  // @@protoc_insertion_point(class_scope:intelliflow.Sensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  double data_;
  friend struct ::TableStruct_sensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sensor

// required string id = 1;
inline bool Sensor::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sensor::has_id() const {
  return _internal_has_id();
}
inline void Sensor::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sensor::id() const {
  // @@protoc_insertion_point(field_get:intelliflow.Sensor.id)
  return _internal_id();
}
inline void Sensor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:intelliflow.Sensor.id)
}
inline std::string* Sensor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:intelliflow.Sensor.id)
  return _internal_mutable_id();
}
inline const std::string& Sensor::_internal_id() const {
  return id_.Get();
}
inline void Sensor::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Sensor::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:intelliflow.Sensor.id)
}
inline void Sensor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:intelliflow.Sensor.id)
}
inline void Sensor::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:intelliflow.Sensor.id)
}
inline std::string* Sensor::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Sensor::release_id() {
  // @@protoc_insertion_point(field_release:intelliflow.Sensor.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Sensor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:intelliflow.Sensor.id)
}
inline std::string* Sensor::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:intelliflow.Sensor.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Sensor::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:intelliflow.Sensor.id)
}

// required double data = 2;
inline bool Sensor::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sensor::has_data() const {
  return _internal_has_data();
}
inline void Sensor::clear_data() {
  data_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Sensor::_internal_data() const {
  return data_;
}
inline double Sensor::data() const {
  // @@protoc_insertion_point(field_get:intelliflow.Sensor.data)
  return _internal_data();
}
inline void Sensor::_internal_set_data(double value) {
  _has_bits_[0] |= 0x00000002u;
  data_ = value;
}
inline void Sensor::set_data(double value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:intelliflow.Sensor.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace intelliflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::intelliflow::Sensor_unit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::intelliflow::Sensor_unit>() {
  return ::intelliflow::Sensor_unit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
